@isTest
public class StudentTriggerTest 
{
    @testSetup 
    static void dataSetupForStudentTriggerTest() 
    {
        Class__c cls = new Class__c(Name = 'TestClass', MaxSize__c = 3, MyCount__c = 0);
        insert cls;
        Class__c newCls = new Class__c(Name = 'newTestClass', MaxSize__c = 3, MyCount__c = 0);
        insert newCls;
        List<Student__c> st = new List<Student__c>();
        for(Integer studentCount = 0;studentCount < 3;studentCount++) 
        {
            st.add(new Student__c(Name = 'TestStudent' + studentCount, Sex__c = 'F', LastName__c = 'Lastname' + studentCount, Class__c = cls.Id));
        }
        insert st;
    }
    @isTest 
    static void testClassTrigger_testMoreThenMaxLimitInsert_getFailureResponse() 
    {
        String operationResult;
        Class__c testClass = [SELECT Id FROM Class__c WHERE Name = 'TestClass'];
        Student__c st = new Student__c(Name = 'TestStudent', Class__c = testClass.Id);
        Test.startTest();
        try
        {
            insert st ;
        }
        catch(Exception e)
        {
            operationResult = e.getMessage();
        }
        Test.stopTest();
        System.assert(operationResult.contains('Cannot insert more then'));
    }
    @isTest 
    static void testClassTrigger_testMyCountCounterInsert_getSuccessResponse() 
    {
        Class__c testClass = [SELECT Id FROM Class__c WHERE Name = 'newTestClass'];
        Student__c st = new Student__c(Name = 'TestStudent', Class__c = testClass.Id, LastName__c = 'Lastname');
        Test.startTest();
        insert st;
        Test.stopTest();
        Decimal myCount = [SELECT Id, MyCount__c FROM Class__c WHERE Name = 'newTestClass'].MyCount__c;
        System.assertEquals(1, myCount);
    }
    @isTest 
    static void testClassTrigger_testMyCountCounterUpdate_getSuccessResponse() 
    {
        Class__c newtestClass = [SELECT Id FROM Class__c WHERE Name = 'newTestClass'];
        Test.startTest();
        List<Student__c> st = [SELECT Id, Class__c FROM Student__c WHERE Name LIKE '%TestStudent%'];
        for(Student__c updatedStudent: st)
        {
            updatedStudent.Class__c = newtestClass.Id;
        }
        update st;
        Test.stopTest();
        Decimal myCount = [SELECT Id, MyCount__c FROM Class__c WHERE Name = 'newTestClass'].MyCount__c;
        System.assertEquals(3, myCount);// New class should get increase from 0 to 3
        Decimal myCountOldClass = [SELECT Id, MyCount__c FROM Class__c WHERE Name = 'TestClass'].MyCount__c;
        System.assertEquals(0, myCountOldClass);// Old class should get decrease fro 3 to 0
    }
}
