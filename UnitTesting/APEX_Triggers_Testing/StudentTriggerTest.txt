@isTest
public class StudentTriggerTest 
{
    @testSetup static void dataSetupForStudentTriggerTest() 
    {
        Class__c cls = new Class__c(Name = 'TestClass', MaxSize__c = 3, MyCount__c = 0);
        insert cls;
        Class__c newCls = new Class__c(Name = 'newTestClass', MaxSize__c = 3, MyCount__c = 0);
        insert newCls;
        List<Student__c> stdnt = new List<Student__c>();
        for(Integer i=0;i<3;i++) 
        {
            stdnt.add(new Student__c(Name = 'TestStudent'+i, Sex__c = 'F', LastName__c = 'Lastname'+i, Class__c = cls.Id));
        }
        insert stdnt;
    }
    @isTest 
    static void testClassTrigger_testMoreThenMaxLimitInsert_getSucessRespond() 
    {
        String operationResult;
        Class__c classId = [SELECT Id FROM Class__c WHERE Name = 'TestClass'];
        Student__c stdnt = new Student__c(Name = 'TestStudent', Class__c = classId.Id);
        Test.startTest();
        try
        {
            Database.SaveResult result= Database.insert(stdnt);
        }
        catch(Exception e)
        {
            operationResult = e.getMessage();
        }
        Test.stopTest();
        System.assert(operationResult.contains('Cannot insert more then'));
    }
    @isTest 
    static void testClassTrigger_testMyCountCounterInsert_getSucessRespond() 
    {
        Class__c classId = [SELECT Id FROM Class__c WHERE Name = 'newTestClass'];
        Student__c stdnt = new Student__c(Name = 'TestStudent', Class__c = classId.Id, LastName__c = 'Lastname');
        Test.startTest();
        Database.SaveResult result= Database.insert(stdnt);
        Test.stopTest();
        Decimal myCount = [SELECT Id, MyCount__c FROM Class__c WHERE Name = 'newTestClass'].MyCount__c;
        System.assertEquals(1, myCount);
    }
    @isTest 
    static void testClassTrigger_testMyCountCounterUpdate_getSucessRespond() 
    {
        Class__c classId = [SELECT Id FROM Class__c WHERE Name = 'TestClass'];
        Class__c newClassId = [SELECT Id FROM Class__c WHERE Name = 'newTestClass'];
        Test.startTest();
        List<Student__c> stdnt = [SELECT Id, Class__c FROM Student__c WHERE Name LIKE '%TestStudent%'];
        for(Student__c updatedStudent: stdnt)
        {
        updatedStudent.Class__c = newClassId.Id;
        }
        update stdnt;
        Test.stopTest();
        Decimal myCount = [SELECT Id, MyCount__c FROM Class__c WHERE Name = 'newTestClass'].MyCount__c;
        System.assertEquals(3, myCount);// New class should get increase from 0 to 3
        Decimal myCountOldClass = [SELECT Id, MyCount__c FROM Class__c WHERE Name = 'TestClass'].MyCount__c;
        System.assertEquals(0, myCountOldClass);// Old class should get decrease fro 3 to 0
    }
}