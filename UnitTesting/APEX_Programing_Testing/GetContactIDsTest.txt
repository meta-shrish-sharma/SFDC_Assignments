@isTest
public class GetContactIdsTest 
{
    @testSetup 
    static void setupGetContactIdsTestData() 
    {
        //Testing for Null GetContactId
        Account acc = new Account(Name = 'TestAccount');
        insert acc;
        List<Contact> ct = new List<Contact>();
        for(Integer contactCount = 0; contactCount < 2;contactCount++)
        {
            ct.add(new Contact(Lastname = 'TestConatct' + contactCount, AccountId = acc.Id));
        }
        insert ct;
        //Testing for Not Null GetContactId
        Account accNotNull = new Account(Name = 'TestNotNull');
        insert accNotNull;
        List<Contact> ctNotNull = new List<Contact>();
        for(Integer count = 0; count < 2;count++)
        {
            ctNotNull.add(new Contact(Lastname = 'TestNotNull' + count, AccountId = accNotNull.Id));
        }
        insert ctNotNull;
        accNotNull.ContactIds__c = ctNotNull[0].Id;//Update value of 1 Id
        update accNotNull;
    }
    @isTest 
    static void testIdsInsertion_whenGetContactIdNull_getSuccessRespond() 
    {
        boolean contactIdsInserted = true;//This varible is used to verify that 
        Id contactId = [SELECT Id FROM Contact WHERE Lastname = 'TestConatct0'].Id;
        Test.startTest();
        GetContactIds.populateContactIds(contactId);
        Test.stopTest();
        Account updatedAccount = [SELECT ContactIds__c, (SELECT Id FROM Contacts) FROM Account WHERE Id IN (SELECT AccountId  FROM Contact WHERE Id = :contactId)];
       	String AccountContId = updatedAccount.ContactIds__c;
        for(Contact contactAccount: updatedAccount.Contacts) // Verify all contact Ids are available or not of any one is not then test fail
        {
            if(!AccountContId.contains(contactAccount.Id))
            {
                contactIdsInserted = false;
            }
        }
        System.assert(contactIdsInserted);
    }
    @isTest 
    static void testIdsInsertion_whenGetContactIdNotNull_getSuccessRespond() 
    {
        Id contactId = [SELECT Id FROM Contact WHERE Lastname = 'TestNotNull1'].Id;
        Test.startTest();
        GetContactIds.populateContactIds(contactId);
        Test.stopTest();
        Account updatedAccount = [SELECT ContactIds__c, (SELECT Id FROM Contacts) FROM Account WHERE Id IN (SELECT AccountId  FROM Contact WHERE Id = :contactId)];
       	String AccountContId = updatedAccount.ContactIds__c;
        System.assert(AccountContId.contains(contactId));
    }
    //Test for Id already available then Id should not insert
    @isTest 
    static void testIdsInsertion_whenIdAvaialableInGetContactId_getFailureRespond() 
    {
        Id contactId = [SELECT Id FROM Contact WHERE Lastname = 'TestNotNull0'].Id;
        Test.startTest();
        GetContactIds.populateContactIds(contactId);
        Test.stopTest();
        Account updatedAccount = [SELECT ContactIds__c, (SELECT Id FROM Contacts) FROM Account WHERE Id IN (SELECT AccountId  FROM Contact WHERE Id = :contactId)];
       	String AccountContId = updatedAccount.ContactIds__c;
        System.assertEquals(contactId, AccountContId);// Only one Id should exist
    }
}
