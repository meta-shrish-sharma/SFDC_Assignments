trigger StudentTrigger on Student__c (before insert, before update) 
{
    if(trigger.isInsert && trigger.isBefore)
    {
        Map<Id, Integer> classCount = new Map<Id, Integer>();//count avialable students of every class
        Map<Id, Integer> insertedClassCount = new Map<Id, Integer>();//Track total no of inserted students
        List<Id> classId = new List<Id>();//List of class Id's just inserted 
        //Fetch all those classes whose records are updated
        for(Student__c st: Trigger.new)
        {
            classId.add(st.Class__c);
        }
        Map<Id, Class__c> insertedClass = new Map<Id, Class__c>([SELECT ID, Maxsize__c, Mycount__c FROM Class__c WHERE Id IN :classId]);
        //get total students of classes in which students are inserted
        List<AggregateResult> classList = [SELECT COUNT(Id), Class__c FROM Student__c WHERE Class__c IN :classId GROUP BY Class__c];
        //Select only those students whose records 
        for(AggregateResult agr: classList)
        {
            classCount.put((Id)agr.get('class__c'), (Integer)agr.get('expr0'));
        }
        for(Student__c st: Trigger.new)//Update students
        {
            //First verify that both values exist in map or not
            Boolean countExistInMap = (classCount.get(st.Class__c)!= null) && (insertedClass.get(st.Class__c).MaxSize__c != null);
            //This code block will not allow to insert if max limit reached
            if((classCount.get(st.Class__c) >= insertedClass.get(st.Class__c).MaxSize__c) && countExistInMap)
            {
                st.addError('Cannot insert more then '+insertedClass.get(st.Class__c).MaxSize__c +  ' student');
            }
            //This code block sync the value of Mycount with the insert of students
            else
            {
                if(insertedClassCount.get(st.Class__c) != null)
                {
                    insertedClassCount.put(st.Class__c, (insertedClassCount.get(st.Class__c) + 1));
                }
                else
                {
                    insertedClassCount.put(st.Class__c, 1);   
                }
            }
        }//students Updated
        //Update the number of inserted students in every class
        for(Id cls: insertedClass.keySet())
        {
            if(insertedClassCount.get(cls) != null)
            {
                insertedClass.get(cls).MyCount__c = insertedClass.get(cls).MyCount__c + insertedClassCount.get(cls);
            }
        }
        update insertedClass.values(); // update the class with the count of newly inserted students
    }
    if(trigger.isUpdate && trigger.isBefore)
    {
        Map<Id, Integer> updatedClassCount = new Map<Id, Integer>();//Track total no of inserted students
        List<Id> updatedClassId = new List<Id>();
        for(Student__c stdnt: Trigger.new)//Add students to newly inserted class
        {
            if(!updatedClassId.contains(stdnt.Class__c))
            {
                updatedClassId.add(stdnt.Class__c);
            }
            if(updatedClassCount.get(stdnt.Class__c) != null)
            {
                updatedClassCount.put(stdnt.Class__c, (updatedClassCount.get(stdnt.Class__c) + 1));
            }
            else
            {
                updatedClassCount.put(stdnt.Class__c, 1);   
            }
        }// List created for updated inserted students
        for(Student__c stdnt: Trigger.old)//Remove students from newly inserted class
        {
            if(!updatedClassId.contains(stdnt.Class__c))
            {
                updatedClassId.add(stdnt.Class__c);
            }
            if(updatedClassCount.get(stdnt.Class__c) != null)
            {
                updatedClassCount.put(stdnt.Class__c, (updatedClassCount.get(stdnt.Class__c) - 1));
            }
            else
            {
                updatedClassCount.put(stdnt.Class__c, -1);   
            }
        }// List created for updated removed students
        List<Class__c> updateClass = [SELECT Id, Maxsize__c, Mycount__c FROM Class__c WHERE Id IN :updatedClassId];
        for(Class__c cls: updateClass)
        {
            if(updatedClassCount.get(cls.Id) != null)
            {
                cls.MyCount__c = cls.MyCount__c + updatedClassCount.get(cls.Id);
            }
        }
        update updateClass; // update the class with the count of newly inserted students
    }
}
