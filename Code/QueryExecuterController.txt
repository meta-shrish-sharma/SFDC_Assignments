public class QueryExecuterController 
{
    public List<sObject> lstObjs {get;set;}
    public List<string> lstFlds {get;private set;}
    public String sortDirection {get;set;}
    private String sortExp;
    public Boolean renderPB {get;set;}
    public Boolean renderError {get;set;}
    public String sortExpression 
    {
        get
        {
            return sortExp;
        }
        set
        {
            //if the column is clicked on then switch between Ascending and Descending modes
            if (value == sortExp)
                sortDirection = (sortDirection == 'ASC')? 'DESC' : 'ASC';
            else
                sortDirection = 'ASC';
            sortExp = value;
        }
    }
    // ** Variables for pagination of Products
    public integer totalRecs{get; set; }       
    private integer index = 0;  
    public integer pageBlockSize{get; set; }
    public integer pageNumber{get; set; }
    //**
    public integer inputPageNumber{get; set; }
    public String queryString;
    public void setqueryString (String s) {
        queryString = s;
        renderPB = true;
        renderError = false;
        pageBlockSize = 10;
        if(pageNumber == null)
        {
            pageNumber = 1;
        }
        //queryString = 'Select Id, Name, BillingCity, BillingCountry, Phone FROM Account';
        system.debug(queryString);
        try
        {
            List<sObject> countLstObjs = Database.query(queryString);
            totalRecs = countLstObjs.size();
            if(totalRecs <= 0)
            {
                renderPB= false;
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'No records found'));
            }
            lstFlds = new List<String>();
            string query = queryString + ' LIMIT '+ pageBlockSize+' OFFSET '+index;
            lstObjs = Database.query(query);
            Set<string> setFlds = new Set<String>();
            for(integer i=0;i<lstObjs.size();i++)
            {
                setFlds.addAll(lstObjs[i].getPopulatedFieldsAsMap().keySet());
            }
            lstFlds.addAll(setFlds);
        }
        catch(Exception e)
        {
            renderPB = false;
            renderError = true;
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Please enter correct query'));
        }
    }
   
    public String getqueryString() {
        return queryString;
    } 
    public PageReference ViewData() 
    {
        //build the full sort expression
        string sortFullExp = sortExp  + ' ' + sortDirection;
        //query the database based on the sort expression
        try
        {
        renderPB = true;
        renderError = false;
        if(sortExp != null && sortDirection != null)
        {
            lstObjs = Database.query(queryString + ' order by ' + sortFullExp + ' LIMIT '+pageBlockSize+' OFFSET '+index);
        }
        else
        {
            lstObjs = Database.query(queryString + ' LIMIT '+pageBlockSize+' OFFSET '+index);    
        }
        }
        catch(Exception e)
        {
            renderPB = false;
            renderError = true;
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Please enter correct query'));
        }
        return null;
    }
    //*** Code for pagination
    public void beginning() {  
        index = 0;  
        pageNumber = 1;
        ViewData();   
    }  
    public void previous() {  
        pageNumber--;
        index = index - pageBlockSize;  
        ViewData();
    }  
    public void next() {  
        pageNumber++;
        index = index + pageBlockSize;  
        ViewData();
    }  
    public void end() {  
        pageNumber = (totalrecs/pageBlockSize) + 1; 
        index = totalrecs - math.mod(totalRecs,pageBlockSize);  
        ViewData();
    } 
    public boolean getprev() {  
        if(index == 0)  
            return true;  
        else  
            return false;  
    }    
    public boolean getnxt() {  
        if((index + pageBlockSize) > totalRecs)  
            return true;  
        else  
            return false;  
    }
    public PageReference goToPageNumber()
    {
        if(inputPageNumber <= ((totalRecs/pageBlockSize) + 1))
        {
            index = pageBlockSize * (inputPageNumber - 1);
            pageNumber = inputPageNumber;
            ViewData();
        }
        return null;
    }
}